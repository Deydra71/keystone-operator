// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApi":       schema_pkg_apis_keystone_v1_KeystoneApi(ref),
		"github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApiSpec":   schema_pkg_apis_keystone_v1_KeystoneApiSpec(ref),
		"github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApiStatus": schema_pkg_apis_keystone_v1_KeystoneApiStatus(ref),
	}
}

func schema_pkg_apis_keystone_v1_KeystoneApi(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeystoneApi is the Schema for the keystoneapis API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApiSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApiStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApiSpec", "github.com/openstack-k8s-operators/keystone-operator/pkg/apis/keystone/v1.KeystoneApiStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_keystone_v1_KeystoneApiSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeystoneApiSpec defines the desired state of KeystoneApi",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"databasePassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystone Database Password String",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseHostname": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystone Database Hostname String",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerImage": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystone Container Image URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mysqlContainerImage": {
						SchemaProps: spec.SchemaProps{
							Description: "Mysql Container Image URL (used for database syncing)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseAdminUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "Database Admin Username",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseAdminPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Database Admin Password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"adminPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystone API Admin Password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystone API Endpoint, the http/https route configured to access the Keystone API",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"replicas"},
			},
		},
	}
}

func schema_pkg_apis_keystone_v1_KeystoneApiStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeystoneApiStatus defines the observed state of KeystoneApi",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dbSyncHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployment messages Messages []string `json:\"messages,omitempty\"` DbSync hash",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployment hash used to detect changes",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bootstrapHash": {
						SchemaProps: spec.SchemaProps{
							Description: "bootstrap completed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"dbSyncHash", "deploymentHash", "bootstrapHash"},
			},
		},
	}
}
